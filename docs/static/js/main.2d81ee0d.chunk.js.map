{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","text","recognize","wrongLength","correctLength","this","_onTextChange","className","type","placeholder","value","onChange","event","target","href","str","itr","EmojiReader","analyzeText","iterator","hasNext","node","next","isEmoji","substr","startIndex","length","setState","getTextLength","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAIqBA,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,oGACNC,UAAW,GACXC,YAAa,EACbC,cAAe,GANJ,E,gEAWfC,KAAKC,cAAcD,KAAKL,MAAMC,Q,+BAGxB,IAAD,OACL,OACI,sBAAKM,UAAU,MAAf,UACI,uBAAOA,UAAU,YAAjB,0BACA,sBAAKA,UAAU,cAAf,UACI,uBAAOA,UAAU,YAAYC,KAAK,OAC3BC,YAAY,4BACZC,MAAOL,KAAKL,MAAMC,KAClBU,SAAU,SAACC,GAAD,OAAW,EAAKN,cAAcM,EAAMC,OAAOH,UAC5D,wBAAOH,UAAU,aAAjB,iCACI,wBAAOA,UAAU,YAAjB,eAAgCF,KAAKL,MAAME,gBAC/C,wBAAOK,UAAU,aAAjB,2BACI,wBAAOA,UAAU,YAAjB,eAAgCF,KAAKL,MAAMG,kBAC/C,wBAAOI,UAAU,aAAjB,gCACI,wBAAOA,UAAU,YAAjB,eAAgCF,KAAKL,MAAMI,oBAC/C,wBAAOG,UAAU,aAAjB,sCAAuD,mBAAGM,OAAO,cAAcC,KAAK,wBAA7B,sCACvD,wBAAOP,UAAU,aAAjB,0BAA2C,mBAAGM,OAAO,cAAcC,KAAK,4CAA7B,+B,oCAM7Cb,GAGV,IAFA,IAAIc,EAAM,GACJC,EAAMC,IAAYC,YAAYjB,GAAMkB,WACnCH,EAAII,WAAW,CAClB,IAAMC,EAAOL,EAAIM,OACbD,EAAKE,QACLR,GAAOd,EAAKuB,OAAOH,EAAKI,WAAYJ,EAAKK,QAEzCX,GAAO,IAIfV,KAAKsB,SAAS,CACV1B,KAAMA,EACNC,UAAWa,EACXZ,YAAaY,EAAIW,OACjBtB,cAAea,IAAYW,cAAc3B,S,GAtDpB4B,aCQlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d81ee0d.chunk.js","sourcesContent":["import './App.css';\nimport React, {Component} from 'react';\nimport EmojiReader from 'emoji-reader';\n\nexport default class App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: \"Input üòÄ string with üë®‚Äçüë®‚Äçüëß‚Äçüë¶\",\n            recognize: \"\",\n            wrongLength: 0,\n            correctLength: 0\n        }\n    }\n\n    componentDidMount() {\n        this._onTextChange(this.state.text)\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <label className=\"App-title\">Emoji Reader</label>\n                <div className=\"App-content\">\n                    <input className=\"App-input\" type=\"text\"\n                           placeholder=\"Input a string with Emoji\"\n                           value={this.state.text}\n                           onChange={(event) => this._onTextChange(event.target.value)}/>\n                    <label className=\"App-Result\">Recognize the emoji:\n                        <label className=\"emphasize\">  {this.state.recognize}</label></label>\n                    <label className=\"App-Result\">String.length:\n                        <label className=\"emphasize\">  {this.state.wrongLength}</label></label>\n                    <label className=\"App-Result\">EmojiReader.length:\n                        <label className=\"emphasize\">  {this.state.correctLength}</label></label>\n                    <label className=\"App-Result\">You can copy emoji from: <a target=\"view_window\" href=\"https://getemoji.com/\">https://getemoji.com/</a></label>\n                    <label className=\"App-Result\">Source Code: <a target=\"view_window\" href=\"https://github.com/YvesCheung/EmojiReader\">Github</a></label>\n                </div>\n            </div>\n        )\n    }\n\n    _onTextChange(text) {\n        let str = \"\";\n        const itr = EmojiReader.analyzeText(text).iterator()\n        while (itr.hasNext()) {\n            const node = itr.next()\n            if (node.isEmoji) {\n                str += text.substr(node.startIndex, node.length)\n            } else {\n                str += \"-\"\n            }\n        }\n\n        this.setState({\n            text: text,\n            recognize: str,\n            wrongLength: str.length,\n            correctLength: EmojiReader.getTextLength(text)\n        })\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}